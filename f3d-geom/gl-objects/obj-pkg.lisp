(in-package :cl-user)


(defpackage :obj
  (:use :common-lisp :lcl :lx :gl :math :common-symbols :transforms)

  (:import-from :gl "COLOR-NAME-TO-GL")
  (:import-from :math "VERTEX-ARRAY-POLYGON-NORMAL" "3D-POLYGON-CONVEX-P")
  
  (:export "GL-OBJECT" "BASIC-GL-OBJECT" "GL-2D-OBJECT-MIXIN" "GL-3D-OBJECT-MIXIN"
	   "DRAW-OBJECT" "SET-GL-ATTRIBUTES" "SELECTABLE-P" 

	   "GL-WORLD" "GL-2D-WORLD" "GL-3D-WORLD" "2D-WORLDS"

	   "MAKE-VERTEX-ARRAY"
	   "MAKE-VERTEX*" "MAKE-VERTEX-ARRAY-FROM-VERTEX-LIST" "VERTEX-ARRAY-ALIST"
	   "GRAPHICS-STYLE" "GL-GRAPHICS-STYLE" 
	   "OBJECT-GRAPHICS-STYLE"
	   
	   "UPDATE-CENTER-OF-ROTATION" "POSITION-FOR-OBJECT-MOTION"
	   "MOVE-WORLD-POSITION"
	   "COMPU-POSITION-ALONG-CAMERA-RAY" "COMPUTE-POSITION-ALONG-RAY"
	   "SET-ORIGIN" "ORIGIN" "MOVE-BY" "ROTATE-BY" "ROTATE-RELATIVE-TO-WORLD-BY"
	   "SELECTED-POINT-WORLD-POSITION"

	   "MATERIAL-MODEL" "SET-ATTRIBUTES" "*DEFAULT-MATERIAL-MODEL*"
	   ;;"DIFFUSE-COLOR" "AMBIENT-COLOR" "EMISSION-COLOR" "SPECULAR-COLOR" "SHININESS"

	   "*OBJECT-SELECTION-MODE*" "*GL-ENABLE-STIPPLES*"

	   "OBJECT-VERTEX"
	   "*BREAK-ON-DISPLAY-ERROR*"
	   "UPDATE-OBJECT" "UPDATE-OBJECT-BEFORE" "UPDATE-OBJECT-AFTER"
	   "DRAW-OBJECT-AROUND"
	   "*TRANSFORM-VERTICES-PROJECTION*"

	   "AXIS-OBJECT" "CYLINDER" "EXTRUDED-OBJECT"

	   "3D-CROSSHAIR-OBJECT" "3D-TEXT-OBJECT" "3D-CURVE" "3D-CLOSED-CURVE" 
	   "3D-RIBBON-CURVE" "3D-POINT-OBJECT" "3D-COMPOSITE-OBJECT"
	   "2D-CROSSHAIR-OBJECT" "2D-TEXT-OBJECT" "2D-CURVE" "2D-CLOSED-CURVE" 
	   "2D-RIBBON-CURVE" "2D-POINT-OBJECT" "2D-COMPOSITE-OBJECT" "2D-RECTANGLE" "2D-RULER-OBJECT"

	   "COMPOSITE-OBJECT"  "CUBE-OBJECT"
	   "HALF-CYLINDER"  "VERTICAL-HALF-CYLINDER"
	   "POINT-OBJECT" 
	   "LIST-OF-FACES-OBJECT"

	   "3D-RULER-OBJECT" "HOUSE-OBJECT" 
	   "CONJUGATE-POINT-OBJECT" "SUPERELLIPSE"
	   "BASIC-OBJECT" "3D-OBJECT" "2D-OBJECT" 

	   "FORWARD-REFERENCED-OBJECT"

	   "UNIQUE-ID"  "OBJECT-FEATURE-SETS"

	   "BOUNDING-BOX"

	   "RADIUS-MIXIN" "ADD-ATTRIBUTE" "REMOVE-ATTRIBUTE"

	   "*FORCE-GRAPHICS-STYLE*"
	   )
  )

